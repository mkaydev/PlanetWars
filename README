To implement a player, set the prototype of the new player object to new Player() and the constructor to the new player constructor
there are two things you have to do in the player's constructor:
    1. set this.color to a color of your choice
    2. call this.initialize()

Afterwards register your player as a contestant by calling contestants.register(playerConstructor).
You need to implement the .think(universe) method, which takes the current universe as a parameter.
Lastly you need to add the line "var _constructor = [Insert your constructor name here];" to the player-file.
Have a look at the sample_players to see examples.
---------------------------------------------------------------------------------------------------

Publicly accessible functions for use in the .think method:

---------methods--------------------------------
Player:sendFleet(source, destination, fleetSize)
    source: a planet, owned by the player
    destination: a planet
    fleetSize: an integer
--------attributes------------------------------
Player:equals
Player:id
Player:isNeutral


---------methods--------------------------------
Planet:isNeutral()
Planet:distanceTo(otherPlanet)
Planet:distanceToCoords(x, y)
Planet:fleetStepsTo(otherPlanet)
Planet:ownerEquals(player)
--------attributes------------------------------
Planet:x
Planet:y
Planet:owner
Planet:forces
Planet:recruitingPerStep
Planet:id


---------methods--------------------------------
Fleet:ownerEquals(player)
Fleet:distanceToDestination()
Fleet:stepsToDestination()
Fleet:isHostileTo(fleetOrPlanet)
Fleet:isHostileToDestination()
Fleet:getMovementPerStep()
--------attributes------------------------------
Fleet:x
Fleet:y
Fleet:movementPerStep
Fleet:source
Fleet:destination
Fleet:owner
Fleet:forces
Fleet:id

---------methods--------------------------------
Universe:getActivePlayers()
Universe:getAllPlanets()
Universe:getPlanets(player)
Universe:getNeutralPlanets()
Universe:getEnemyPlanets(player)
Universe:sortByDistance(planet, planets)
Universe:sortByRecruitingPower(planets)
Universe:getGroundForces(player)
Universe:getAirForces(player)
Universe:getForces(player)
Universe:getAllFleets()
Universe:getFleets(player)
Universe:getEnemyFleets(player)
Universe:sortByDistanceToDestination(fleets)

--------attributes------------------------------
Universe:width
Universe:height
Universe:fleetMovementPerStep


----------------------helper-functions------------------
shuffleArray(arr)
checkUnique(arr, attribute [, inner_attribute])
createId([prefix])

---------------------------------------------------------------------------------------------------
For debugging:

There is no console or window object in a web worker. The helper.js file defines these objects in a way that a message is posted to the creator of the worker.
console.log(message) allows logging to the console (only string or json objects)
window.alert(message) allows creating alert windows (only string or json objects)

If your player manages to freeze your browser, because the .think method takes too long and you're not able to debug the method because of it,
try setting maxRounds value (planet_wars.js) to a lower value. The simulator tries to pre-calculate this number of states.

Be aware that this logging function relies on the asynchronous message passing of the web worker. It seems that the messages don't necessarily arrive in order.
A messageId (count of logs/alerts sent) is being sent together with the message for this reason. The console and window objects keep track of this value.

---------------------------------------------------------------------------------------------------
Be warned:
- Don't try to screw with the _ stuff. their scope is limited to this universe slave, i.e. to one player. By screwing with them you only screw your own player.
- Don't try to call the .sendFleet method on other players - it won't work.
- Don't try to send more forces than you have, send fractions of forces, negative forces etc. - won't work.
- Be aware that fleets are only visible to you starting with the step _after_ they have been sent.